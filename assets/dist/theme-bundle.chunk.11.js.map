{"version":3,"sources":["webpack://WebpackChiara/./assets/js/theme/category.js","webpack://WebpackChiara/./assets/js/theme/common/form-utils.js","webpack://WebpackChiara/./assets/js/theme/common/url-utils.js","webpack://WebpackChiara/./assets/js/theme/global/compare-products.js","webpack://WebpackChiara/./assets/js/theme/catalog.js","webpack://WebpackChiara/./assets/js/theme/common/faceted-search.js","webpack://WebpackChiara/./assets/js/chiara/sort-by.js"],"names":["Category","onReady","compareProducts","this","context","urls","$","length","initFacetedSearch","onSortBySubmit","bind","hooks","on","initInfiniteScroll","initMobileSortBy","themeSettings","categorypage_infiniteScroll","then","module","initCategoryPage","$productListingContainer","$facetedSearchContainer","requestOptions","config","category","shop_by_price","products","limit","categoryProductsPerPage","template","productListing","sidebar","showMore","facetedSearch","FacetedSearch","content","html","animate","scrollTop","CatalogPage","inputTagNames","classifyForm","formSelector","options","$form","$inputs","find","join","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","addClass","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","$field","fieldId","match","getFieldId","value","after","Validators","setEmailValidation","validator","field","add","selector","validate","cb","val","forms","email","errorMessage","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","result","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","nod","classes","forEach","hasClass","removeClass","urlUtils","getUrl","window","location","pathname","search","goToUrl","url","history","pushState","document","title","trigger","replaceParams","params","param","parsed","Url","parse","hasOwnProperty","query","format","buildQueryString","queryData","key","out","Array","isArray","ndx","substring","updateCounterNav","counter","$link","urlContext","is","attr","compare","$checked","$compareLink","element","compareCounter","event","item","product","currentTarget","$clickedCompareLink","checked","push","index","indexOf","splice","decrementCounter","showAlertModal","preventDefault","href","queryParams","serialize","split","page","PageManager","callback","defaultOptions","accordionToggleSelector","blockerSelector","clearFacetSelector","componentSelector","facetNavListSelector","priceRangeErrorSelector","priceRangeFieldsetSelector","priceRangeFormSelector","priceRangeMaxPriceSelector","priceRangeMinPriceSelector","showMoreToggleSelector","facetedSearchFilterItems","modal","modalFactory","modalOpen","collapsedFacets","collapsedFacetItems","collapsibleFactory","initPriceValidator","navList","collapseFacetItems","accordionToggle","collapsible","isCollapsed","targetId","setTimeout","collapseAllFacets","onStateChange","onToggleClick","onAccordionToggle","onClearFacet","onFacetClick","onRangeSubmit","filterFacetItems","bindEvents","refreshView","restoreCollapsedFacets","restoreCollapsedFacetItems","updateView","show","api","getPage","err","hide","Error","expandFacetItems","$navList","id","hasMoreResults","toggleFacetItems","getMoreFacetResults","facet","facetUrl","list_all","response","open","updateContent","$items","text","expandFacet","$accordionToggle","collapseFacet","close","expandAllFacets","priceRangeValidator","unbindEvents","off","stopPropagation","$toggle","toggleClass","areAll","constants","VALID","decodeURI","mobileSortBy","MobileSortBy","onSortBySelected","onMobileSortBySelected","target","filter","first"],"mappings":"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","file":"theme-bundle.chunk.11.js","sourcesContent":["import { hooks } from '@bigcommerce/stencil-utils';\nimport CatalogPage from './catalog';\nimport compareProducts from './global/compare-products';\nimport FacetedSearch from './common/faceted-search';\nimport { initMobileSortBy } from '../chiara/sort-by'; // Chiara\n\nexport default class Category extends CatalogPage {\n    onReady() {\n        compareProducts(this.context.urls);\n\n        if ($('#facetedSearch').length > 0) {\n            this.initFacetedSearch();\n        } else {\n            this.onSortBySubmit = this.onSortBySubmit.bind(this);\n            hooks.on('sortBy-submitted', this.onSortBySubmit);\n        }\n\n        // Chiara\n        this.initInfiniteScroll();\n        initMobileSortBy();\n    }\n\n    // Chiara\n    initInfiniteScroll() {\n        if (this.context.themeSettings.categorypage_infiniteScroll) {\n            import('../chiara/infinite-scroll').then(module => module.initCategoryPage(this.context));\n        }\n    }\n\n    initFacetedSearch() {\n        const $productListingContainer = $('#product-listing-container');\n        const $facetedSearchContainer = $('#faceted-search-container');\n        const productsPerPage = this.context.categoryProductsPerPage;\n        const requestOptions = {\n            config: {\n                category: {\n                    shop_by_price: true,\n                    products: {\n                        limit: productsPerPage,\n                    },\n                },\n            },\n            template: {\n                productListing: 'category/product-listing',\n                sidebar: 'category/sidebar',\n            },\n            showMore: 'category/show-more',\n        };\n\n        this.facetedSearch = new FacetedSearch(requestOptions, (content) => {\n            $productListingContainer.html(content.productListing);\n            $facetedSearchContainer.html(content.sidebar);\n\n            $('html, body').animate({\n                scrollTop: 0,\n            }, 100);\n        }, { context: this.context }); // Chiara add context\n    }\n}\n","import _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","import Url from 'url';\n\nconst urlUtils = {\n    getUrl: () => `${window.location.pathname}${window.location.search}`,\n\n    goToUrl: (url) => {\n        window.history.pushState({}, document.title, url);\n        $(window).trigger('statechange');\n    },\n\n    replaceParams: (url, params) => {\n        const parsed = Url.parse(url, true);\n        let param;\n\n        // Let the formatter use the query object to build the new url\n        parsed.search = null;\n\n        for (param in params) {\n            if (params.hasOwnProperty(param)) {\n                parsed.query[param] = params[param];\n            }\n        }\n\n        return Url.format(parsed);\n    },\n\n    buildQueryString: (queryData) => {\n        let out = '';\n        let key;\n        for (key in queryData) {\n            if (queryData.hasOwnProperty(key)) {\n                if (Array.isArray(queryData[key])) {\n                    let ndx;\n\n                    for (ndx in queryData[key]) {\n                        if (queryData[key].hasOwnProperty(ndx)) {\n                            out += `&${key}=${queryData[key][ndx]}`;\n                        }\n                    }\n                } else {\n                    out += `&${key}=${queryData[key]}`;\n                }\n            }\n        }\n\n        return out.substring(1);\n    },\n};\n\nexport default urlUtils;\n","import _ from 'lodash';\nimport { showAlertModal } from './modal';\n\nfunction decrementCounter(counter, item) {\n    const index = counter.indexOf(item);\n\n    if (index > -1) {\n        counter.splice(index, 1);\n    }\n}\n\nfunction incrementCounter(counter, item) {\n    counter.push(item);\n}\n\nfunction updateCounterNav(counter, $link, urlContext) {\n    if (counter.length !== 0) {\n        if (!$link.is('visible')) {\n            $link.addClass('show');\n        }\n        $link.attr('href', `${urlContext.compare}/${counter.join('/')}`);\n        $link.find('span.countPill').html(counter.length);\n    } else {\n        $link.removeClass('show');\n    }\n}\n\nexport default function (urlContext) {\n    let products;\n\n    const $checked = $('body').find('input[name=\"products\\[\\]\"]:checked');\n    const $compareLink = $('a[data-compare-nav]');\n\n    if ($checked.length !== 0) {\n        products = _.map($checked, element => element.value);\n\n        updateCounterNav(products, $compareLink, urlContext);\n    }\n\n    const compareCounter = products || [];\n\n    $('body').on('click', '[data-compare-id]', event => {\n        const product = event.currentTarget.value;\n        const $clickedCompareLink = $('a[data-compare-nav]');\n\n        if (event.currentTarget.checked) {\n            incrementCounter(compareCounter, product);\n        } else {\n            decrementCounter(compareCounter, product);\n        }\n\n        updateCounterNav(compareCounter, $clickedCompareLink, urlContext);\n    });\n\n    $('body').on('submit', '[data-product-compare]', event => {\n        const $this = $(event.currentTarget);\n        const productsToCompare = $this.find('input[name=\"products\\[\\]\"]:checked');\n\n        if (productsToCompare.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            event.preventDefault();\n        }\n    });\n\n    $('body').on('click', 'a[data-compare-nav]', () => {\n        // Papathemes fix - Filter/Page change\n        if (compareCounter.length <= 1) {\n            showAlertModal('You must select at least two products to compare');\n            return false;\n        }\n\n        window.location.href = `${urlContext.compare}/${compareCounter.join('/')}`;\n    });\n}\n","import PageManager from './page-manager';\nimport urlUtils from './common/url-utils';\nimport Url from 'url';\n\nexport default class CatalogPage extends PageManager {\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\n    }\n}\n","import { hooks, api } from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport Url from 'url';\nimport urlUtils from './url-utils';\nimport modalFactory from '../global/modal';\nimport collapsibleFactory from './collapsible';\nimport { Validators } from './form-utils';\nimport nod from './nod';\n\n/**\n * Faceted search view component\n */\nclass FacetedSearch {\n    /**\n     * @param {object} requestOptions - Object with options for the ajax requests\n     * @param {function} callback - Function to execute after fetching templates\n     * @param {object} options - Configurable options\n     * @example\n     *\n     * let requestOptions = {\n     *      templates: {\n     *          productListing: 'category/product-listing',\n     *          sidebar: 'category/sidebar'\n     *     }\n     * };\n     *\n     * let templatesDidLoad = function(content) {\n     *     $productListingContainer.html(content.productListing);\n     *     $facetedSearchContainer.html(content.sidebar);\n     * };\n     *\n     * let facetedSearch = new FacetedSearch(requestOptions, templatesDidLoad);\n     */\n    constructor(requestOptions, callback, options) {\n        const defaultOptions = {\n            accordionToggleSelector: '#facetedSearch .accordion-navigation, #facetedSearch .facetedSearch-toggle',\n            blockerSelector: '#facetedSearch .blocker',\n            clearFacetSelector: '#facetedSearch .facetedSearch-clearLink',\n            componentSelector: '#facetedSearch-navList',\n            facetNavListSelector: '#facetedSearch .navList',\n            priceRangeErrorSelector: '#facet-range-form .form-inlineMessage',\n            priceRangeFieldsetSelector: '#facet-range-form .form-fieldset',\n            priceRangeFormSelector: '#facet-range-form',\n            priceRangeMaxPriceSelector: '#facet-range-form [name=max_price]',\n            priceRangeMinPriceSelector: '#facet-range-form [name=min_price]',\n            showMoreToggleSelector: '#facetedSearch .accordion-content .toggleLink',\n            facetedSearchFilterItems: '#facetedSearch-filterItems .form-input',\n            modal: modalFactory('#modal')[0],\n            modalOpen: false,\n        };\n\n        // Private properties\n        this.requestOptions = requestOptions;\n        this.callback = callback;\n        this.options = _.extend({}, defaultOptions, options);\n        this.collapsedFacets = [];\n        this.collapsedFacetItems = [];\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Show limited items by default\n        $(this.options.facetNavListSelector).each((index, navList) => {\n            this.collapseFacetItems($(navList));\n        });\n\n        // Mark initially collapsed accordions\n        $(this.options.accordionToggleSelector).each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n\n            if (collapsible.isCollapsed) {\n                this.collapsedFacets.push(collapsible.targetId);\n            }\n        });\n\n        // Collapse all facets if initially hidden\n        // NOTE: Need to execute after Collapsible gets bootstrapped\n        setTimeout(() => {\n            if ($(this.options.componentSelector).is(':hidden')) {\n                this.collapseAllFacets();\n            }\n        });\n\n        // Observe user events\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onToggleClick = this.onToggleClick.bind(this);\n        this.onAccordionToggle = this.onAccordionToggle.bind(this);\n        this.onClearFacet = this.onClearFacet.bind(this);\n        this.onFacetClick = this.onFacetClick.bind(this);\n        this.onRangeSubmit = this.onRangeSubmit.bind(this);\n        this.onSortBySubmit = this.onSortBySubmit.bind(this);\n        this.filterFacetItems = this.filterFacetItems.bind(this);\n\n        this.bindEvents();\n    }\n\n    // Public methods\n    refreshView(content) {\n        if (content) {\n            this.callback(content);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Restore view state\n        this.restoreCollapsedFacets();\n        this.restoreCollapsedFacetItems();\n\n        // Bind events\n        this.bindEvents();\n    }\n\n    updateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }\n\n    expandFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Remove\n        this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n    }\n\n    collapseFacetItems($navList) {\n        const id = $navList.attr('id');\n        const hasMoreResults = $navList.data('hasMoreResults');\n\n        if (hasMoreResults) {\n            this.collapsedFacetItems = _.union(this.collapsedFacetItems, [id]);\n        } else {\n            this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n        }\n    }\n\n    toggleFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Toggle depending on `collapsed` flag\n        if (_.includes(this.collapsedFacetItems, id)) {\n            this.getMoreFacetResults($navList);\n\n            return true;\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    getMoreFacetResults($navList) {\n        const facet = $navList.data('facet');\n        const facetUrl = urlUtils.getUrl();\n\n        if (this.requestOptions.showMore) {\n            api.getPage(facetUrl, {\n                template: this.requestOptions.showMore,\n                params: {\n                    list_all: facet,\n                },\n            }, (err, response) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                this.options.modal.open();\n                this.options.modalOpen = true;\n                this.options.modal.updateContent(response);\n            });\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    filterFacetItems(event) {\n        const $items = $('.navList-item');\n        const query = $(event.currentTarget).val().toLowerCase();\n\n        $items.each((index, element) => {\n            const text = $(element).text().toLowerCase();\n            if (text.indexOf(query) !== -1) {\n                $(element).show();\n            } else {\n                $(element).hide();\n            }\n        });\n    }\n\n    expandFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.open();\n    }\n\n    collapseFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.close();\n    }\n\n    collapseAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.collapseFacet($accordionToggle);\n        });\n    }\n\n    expandAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.expandFacet($accordionToggle);\n        });\n    }\n\n    // Private methods\n    initPriceValidator() {\n        if ($(this.options.priceRangeFormSelector).length === 0) {\n            return;\n        }\n\n        const validator = nod();\n        const selectors = {\n            errorSelector: this.options.priceRangeErrorSelector,\n            fieldsetSelector: this.options.priceRangeFieldsetSelector,\n            formSelector: this.options.priceRangeFormSelector,\n            maxPriceSelector: this.options.priceRangeMaxPriceSelector,\n            minPriceSelector: this.options.priceRangeMinPriceSelector,\n        };\n\n        Validators.setMinMaxPriceValidation(validator, selectors);\n\n        this.priceRangeValidator = validator;\n    }\n\n    restoreCollapsedFacetItems() {\n        const $navLists = $(this.options.facetNavListSelector);\n\n        // Restore collapsed state for each facet\n        $navLists.each((index, navList) => {\n            const $navList = $(navList);\n            const id = $navList.attr('id');\n            const shouldCollapse = _.includes(this.collapsedFacetItems, id);\n\n            if (shouldCollapse) {\n                this.collapseFacetItems($navList);\n            } else {\n                this.expandFacetItems($navList);\n            }\n        });\n    }\n\n    restoreCollapsedFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n            const id = collapsible.targetId;\n            const shouldCollapse = _.includes(this.collapsedFacets, id);\n\n            if (shouldCollapse) {\n                this.collapseFacet($accordionToggle);\n            } else {\n                this.expandFacet($accordionToggle);\n            }\n        });\n    }\n\n    bindEvents() {\n        // Clean-up\n        this.unbindEvents();\n\n        // DOM events\n        $(window).on('statechange', this.onStateChange);\n        $(document).on('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).on('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).on('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).on('click', this.onClearFacet);\n\n        // Hooks\n        hooks.on('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.on('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.on('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    unbindEvents() {\n        // DOM events\n        $(window).off('statechange', this.onStateChange);\n        $(document).off('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).off('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).off('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).off('click', this.onClearFacet);\n\n        // Hooks\n        hooks.off('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.off('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.off('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    onClearFacet(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Update URL\n        urlUtils.goToUrl(url);\n    }\n\n    onToggleClick(event) {\n        const $toggle = $(event.currentTarget);\n        const $navList = $($toggle.attr('href'));\n\n        // Prevent default\n        event.preventDefault();\n\n        // Toggle visible items\n        this.toggleFacetItems($navList);\n    }\n\n    onFacetClick(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n\n        $link.toggleClass('is-selected');\n\n        // Update URL\n        urlUtils.goToUrl(url);\n\n        if (this.options.modalOpen) {\n            this.options.modal.close();\n        }\n    }\n\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) }));\n    }\n\n    onRangeSubmit(event) {\n        event.preventDefault();\n\n        if (!this.priceRangeValidator.areAll(nod.constants.VALID)) {\n            return;\n        }\n\n        const url = Url.parse(window.location.href);\n        const queryParams = decodeURI($(event.currentTarget).serialize());\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: `?${queryParams}` }));\n    }\n\n    onStateChange() {\n        this.updateView();\n    }\n\n    onAccordionToggle(event) {\n        const $accordionToggle = $(event.currentTarget);\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n        const id = collapsible.targetId;\n\n        if (collapsible.isCollapsed) {\n            this.collapsedFacets = _.union(this.collapsedFacets, [id]);\n        } else {\n            this.collapsedFacets = _.without(this.collapsedFacets, id);\n        }\n    }\n}\n\nexport default FacetedSearch;\n","import { hooks } from '@bigcommerce/stencil-utils';\n\nlet mobileSortBy;\n\nclass MobileSortBy {\n    constructor() {\n        this.onSortBySelected = this.onSortBySelected.bind(this);\n        this.onMobileSortBySelected = this.onMobileSortBySelected.bind(this);\n\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        // Clean-up\n        this.unbindEvents();\n\n        // DOM events\n        $('body').on('click', '[data-mobile-sort-by] [data-value]', this.onMobileSortBySelected);\n\n        // Hooks\n        hooks.on('sortBy-select-changed', this.onSortBySelected);\n    }\n\n    unbindEvents() {\n        // DOM events\n        $('body').off('click', '[data-mobile-sort-by] [data-value]', this.onMobileSortBySelected);\n\n        // Hooks\n        hooks.off('sortBy-select-changed', this.onSortBySelected);\n    }\n\n    onSortBySelected(event) {\n        const value = $(event.target).val();\n        $('[data-mobile-sort-by]').find('[data-value]')\n            .removeClass('is-active')\n            .filter(`[data-value=${value}]`)\n            .addClass('is-active');\n    }\n\n    onMobileSortBySelected(event) {\n        event.preventDefault();\n        $('[data-sort-by] select')\n            .val($(event.target).data('value'))\n            .trigger('change', event);\n\n        // Close the panel\n        const collapsible = $('[data-mobile-sort-by] [data-collapsible]').first().data('collapsibleInstance');\n        if (collapsible) {\n            collapsible.close();\n        }\n    }\n}\n\nexport default MobileSortBy;\n\nexport function initMobileSortBy() {\n    if (!mobileSortBy) {\n        mobileSortBy = new MobileSortBy();\n    }\n    return mobileSortBy;\n}\n"],"sourceRoot":""}