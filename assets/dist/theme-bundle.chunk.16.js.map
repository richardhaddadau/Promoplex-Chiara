{"version":3,"sources":["webpack://WebpackChiara/./assets/js/chiara/card-swatches/ProductSwatches.js","webpack://WebpackChiara/./assets/js/chiara/card-swatches/Card.js"],"names":["ProductSwatches","cardSelector","productIdSelector","findProductIdByImg","swatchesContainerSelector","cardImageSelector","addToCartFormSelector","productViewFile","attributesTemplate","templateCustomTags","imageSize","inputFinderFunc","swatchesLimit","imageReplacerFunc","displayInStockOnly","autoSelectOptionValues","graphQLToken","this","config","onWindowScroll","bind","bindEvents","$","window","on","MutationObserver","WebKitMutationObserver","mutationObserver","mutations","$newElements","reduce","accumulate","mutation","addedNodes","observe","document","documentElement","childList","subtree","unbindEvents","off","disconnect","$body","cards","each","i","el","$scope","data","inView","is","productId","find","get","id","img","m","String","src","match","Number","$attributesContainer","length","$cardImage","first","card","Card","autoInit","push","addClass","ids","map","ajax","url","method","JSON","stringify","query","headers","xhrFields","withCredentials","success","resp","site","products","edges","forEach","edge","filter","node","entityId","graphQLNode","init","requestInStockAttributes","buildProductOptions","requestProductOptions","action","product_id","BCData","csrf_token","attributesData","in_stock_attributes","instock","attributes","productOptions","_options","optionNode","values","_values","valueNode","indexOf","imageUrl","hexColors","content","label","color","join","attributeId","attributeValue","$swatches","swatches","labelEl","$label","$input","attr","replace","html","$form","Mustache","render","append","hide","minPurchaseQuantity","defaultValue","_defaultValue","isDefault","checkedByDefault","prop","event","preventDefault","$a","currentTarget","value","removeClass","val","requestAttributesChange","moreEl","$more","$list","closest","$less","$items","$hiddenItems","j","show","FormData","filterEmptyFilesFromForm","contentType","processData","image","price","viewModel","getViewModel","updatePriceView","formData","key","File","name","size","e","console","error","$priceWithTax","$priceWithoutTax","rrpWithTax","$div","$span","rrpWithoutTax","nonSaleWithTax","nonSaleWithoutTax","priceSaved","priceNowLabel","priceLabel","clearPricingNotFound","with_tax","formatted","without_tax","rrp_with_tax","rrp_without_tax","saved","non_sale_price_with_tax","non_sale_price_without_tax"],"mappings":"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","file":"theme-bundle.chunk.16.js","sourcesContent":["import inView from 'in-view';\nimport { debounce } from 'lodash';\nimport Card from './Card';\n\nclass ProductSwatches {\n    constructor({\n        cardSelector = '.product .card, .productCarousel-slide .card',\n        productIdSelector = '[data-product-id]',\n        findProductIdByImg = false,\n        swatchesContainerSelector = '.card-text--colorswatches',\n        cardImageSelector = '.card-image',\n        addToCartFormSelector = 'form[data-cart-item-add]',\n        productViewFile = 'products/product-view',\n        attributesTemplate = `\n            <div class=\"productSwatches-attributes\">\n                {{#attributes}}\n                    <div class=\"productSwatches-swatches\" data-swatches>\n                        {{#.}}\n                            <a href=\"#\" class=\"productSwatches-swatches-item\" title=\"{{label}}\"\n                                data-attribute-id=\"{{attributeId}}\"\n                                data-attribute-value=\"{{attributeValue}}\">{{&content}}</a>\n                        {{/.}}\n                        <button type=\"button\" class=\"productSwatches-swatches-more\" data-more>+ More</button>\n                        <button type=\"button\" class=\"productSwatches-swatches-less\" data-less>- Less</button>\n                    </div>\n                {{/attributes}}\n            </div>\n        `,\n        templateCustomTags = null,\n        imageSize = '590x590',\n        inputFinderFunc = null,\n        swatchesLimit = 0,\n        imageReplacerFunc = null,\n        displayInStockOnly = false,\n        autoSelectOptionValues = true,\n        graphQLToken = ''\n    } = {}) {\n        this.config = {\n            cardSelector,\n            productIdSelector,\n            findProductIdByImg,\n            swatchesContainerSelector,\n            cardImageSelector,\n            addToCartFormSelector,\n            productViewFile,\n            attributesTemplate,\n            templateCustomTags,\n            imageSize,\n            inputFinderFunc,\n            swatchesLimit,\n            imageReplacerFunc,\n            displayInStockOnly,\n            autoSelectOptionValues,\n            graphQLToken,\n        };\n        this.onWindowScroll = debounce(this.onWindowScroll.bind(this, null), 200);\n\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        $(window).on('scroll resize load', this.onWindowScroll);\n\n        const MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n        if (MutationObserver) {\n            this.mutationObserver = new MutationObserver(mutations => {\n                const $newElements = mutations.reduce((accumulate, mutation) => [...accumulate, ...mutation.addedNodes], []);\n                this.onWindowScroll($newElements);\n            });\n            this.mutationObserver.observe(document.documentElement, {\n                childList: true,\n                subtree: true,\n            });\n        \n        }\n    }\n\n    unbindEvents() {\n        $(window).off('scroll resize load', this.onWindowScroll);\n\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n            this.mutationObserver = null;\n        }\n    }\n\n    onWindowScroll($body = null) {\n        const cards = [];\n\n        $(this.config.cardSelector, $body).each((i, el) => {\n            const $scope = $(el);\n            if ($scope.data('productSwatchesCard') || !inView.is(el)) {\n                return;\n            }\n\n            let productId = $scope.find(this.config.productIdSelector).data('productId');\n            if (!productId) {\n                // try to find product ID by img src\n                if (!this.config.findProductIdByImg) {\n                    return;\n                }\n                productId = $scope.find('img').get().reduce((id, img) => {\n                    if (id) {\n                        return id;\n                    }\n                    const m = String(img.src).match(/products\\/([0-9]+)\\//);\n                    return m ? Number(m[1]) : id;\n                }, null);\n                if (!productId) {\n                    return;\n                }\n            }\n\n            const $attributesContainer = $scope.find(this.config.swatchesContainerSelector);\n            if ($attributesContainer.length === 0) {\n                return;\n            }\n\n            const {\n                productViewFile,\n                attributesTemplate,\n                templateCustomTags,\n                addToCartFormSelector,\n                imageSize,\n                inputFinderFunc,\n                swatchesLimit,\n                imageReplacerFunc,\n                displayInStockOnly,\n                autoSelectOptionValues,\n                graphQLToken,\n            } = this.config;\n\n            const $cardImage = $scope.find(this.config.cardImageSelector).first();\n\n            const card = new Card({\n                $scope,\n                $attributesContainer,\n                productId,\n                productViewFile,\n                attributesTemplate,\n                templateCustomTags,\n                addToCartFormSelector,\n                $cardImage,\n                imageSize,\n                inputFinderFunc,\n                swatchesLimit,\n                imageReplacerFunc,\n                displayInStockOnly,\n                autoSelectOptionValues,\n                autoInit: !graphQLToken,\n            });\n            cards.push(card);\n\n            $scope.data('productSwatchesCard', card);\n            $scope.addClass('productSwatchesLoaded');\n        });\n\n        if (this.config.graphQLToken && cards.length > 0) {\n            const ids = cards.map(card => card.productId);\n            $.ajax({\n                url: '/graphql',\n                method: 'POST',\n                data: JSON.stringify({\n                    query: `\n                        query {\n                            site {\n                                products (entityIds: ${JSON.stringify(ids)}, first: ${ids.length}) {\n                                    edges {\n                                        node {\n                                            entityId\n                                            name\n                                            minPurchaseQuantity\n                                            productOptions {\n                                                edges {\n                                                    node {\n                                                        entityId\n                                                        displayName\n                                                        ... on CheckboxOption {\n                                                            checkedByDefault\n                                                        }\n                                                        ... on MultipleChoiceOption {\n                                                            values {\n                                                                edges {\n                                                                    node {\n                                                                        entityId\n                                                                        isDefault\n                                                                        ... on SwatchOptionValue {\n                                                                            label\n                                                                            hexColors\n                                                                            imageUrl(width: 100)\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    `\n                }),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.config.graphQLToken}`,\n                },\n                xhrFields: {\n                    withCredentials: true,\n                },\n                success: (resp) => {\n                    resp.data.site.products.edges.forEach(edge => {\n                        cards.filter(card => card.productId == edge.node.entityId).forEach(card => {\n                            card.graphQLNode = edge.node;\n                            card.init();\n                        });\n                    })\n                },\n            });\n        }\n    }\n}\n\nexport default ProductSwatches;","import Mustache from 'mustache';\n\nclass Card {\n    constructor({\n        $scope,\n        $attributesContainer,\n        productId,\n        productViewFile,\n        attributesTemplate,\n        templateCustomTags,\n        addToCartFormSelector,\n        $cardImage,\n        imageSize,\n        inputFinderFunc,\n        swatchesLimit,\n        imageReplacerFunc,\n        displayInStockOnly,\n        autoSelectOptionValues,\n        autoInit = true,\n        graphQLNode,\n    }) {\n        this.$scope = $scope;\n        this.productId = productId;\n        this.$attributesContainer = $attributesContainer;\n        this.productViewFile = productViewFile;\n        this.attributesTemplate = attributesTemplate;\n        this.templateCustomTags = templateCustomTags;\n        this.addToCartFormSelector = addToCartFormSelector;\n        this.$cardImage = $cardImage;\n        this.imageSize = imageSize;\n        this.inputFinderFunc = inputFinderFunc;\n        this.swatchesLimit = swatchesLimit;\n        this.imageReplacerFunc = imageReplacerFunc;\n        this.displayInStockOnly = displayInStockOnly;\n        this.autoSelectOptionValues = autoSelectOptionValues;\n        this.autoInit = autoInit;\n        this.graphQLNode = graphQLNode;\n\n        if (this.autoInit) {\n            this.init();\n        }\n    }\n\n    init() {\n        if (this.displayInStockOnly) {\n            this.requestInStockAttributes();\n        } else {\n            if (this.graphQLNode) {\n                this.buildProductOptions();\n            } else {\n                this.requestProductOptions();\n            }\n        }\n    }\n\n    requestInStockAttributes() {\n        $.ajax({\n            url: `/remote/v1/product-attributes/${this.productId}`,\n            method: 'POST',\n            data: {\n                action: 'add',\n                product_id: this.productId,\n            },\n            headers: {\n                'stencil-config': '{}',\n                'stencil-options': '{}',\n                'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',\n            },\n            xhrFields: {\n                withCredentials: true,\n            },\n            success: (resp) => {\n                const attributesData = resp.data || {};\n                if (typeof attributesData.in_stock_attributes === 'object' || attributesData.instock) {\n                    if (this.graphQLNode) {\n                        this.buildProductOptions(attributesData);\n                    } else {\n                        this.requestProductOptions(attributesData);\n                    }\n                }\n            },\n        });\n    }\n\n    requestProductOptions(attributesData) {\n        $.ajax({\n            url: `/products.php?productId=${this.productId}`,\n            method: 'GET',\n            headers: {\n                'stencil-config': '{}',\n                'stencil-options': `{\"render_with\":\"${this.productViewFile}\"}`,\n                'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',\n            },\n            xhrFields: {\n                withCredentials: true,\n            },\n            success: (resp) => {\n                this.buildProductOptions(attributesData, resp);\n            },\n        });\n    }\n\n    buildProductOptions(attributesData = {}, resp) {\n        const data = {\n            attributes: [],\n        };\n\n\n        if (this.graphQLNode) {\n            // load attributes from graphQL\n            data.attributes = this.graphQLNode.productOptions.edges.reduce((_options, { node: optionNode }) => {\n                if (optionNode.values) {\n                    const values = optionNode.values.edges.reduce((_values, { node: valueNode }) => {\n                        if (typeof attributesData.in_stock_attributes !== 'object' || attributesData.in_stock_attributes.indexOf(valueNode.entityId) > -1) {\n                            if (valueNode.imageUrl || valueNode.hexColors) {\n                                _values.push({\n                                    content: valueNode.imageUrl \n                                        ? `<span class=\"form-option-variant form-option-variant--pattern\" title=\"${valueNode.label}\" style=\"background-image: url('${valueNode.imageUrl}');\"></span>`\n                                        : valueNode.hexColors.map(color => `<span class='form-option-variant form-option-variant--color' title=\"${valueNode.label}\" style=\"background-color: ${color}\"></span>`).join(''),\n                                    label: valueNode.label,\n                                    attributeId: optionNode.entityId,\n                                    attributeValue: valueNode.entityId,\n                                });\n                            }\n                        }\n                        return _values;\n                    }, []);\n                    if (values.length > 0) {\n                        _options.push(values);\n                    }\n                }\n                return _options;\n            }, []);\n        } else {\n            // load attributes from AJAX request\n            $(resp).find('[data-product-attribute=\"swatch\"]').each((i, el) => {\n                const $swatches = $(el);\n                const swatches = [];\n                \n                $swatches.find('[data-product-attribute-value]').each((i, labelEl) => {\n                    const $label = $(labelEl);\n                    const $input = this.inputFinderFunc ? this.inputFinderFunc($swatches, $label) : $swatches.find(`[id=\"${$label.attr('for')}\"]`);\n                    const attributeValue = Number($input.attr('value'));\n                    const attributeId = Number($input.attr('name').replace(/attribute\\[([0-9]+)\\]/, '$1'));\n        \n                    if (typeof attributesData.in_stock_attributes !== 'object' || attributesData.in_stock_attributes.indexOf(attributeValue) > -1) {\n                        swatches.push({\n                            content: $label.html(),\n                            label: $input.data('productAttributeLabel'),\n                            attributeId,\n                            attributeValue,\n                        });\n                    }\n                });\n\n                if (swatches.length > 0) {\n                    data.attributes.push(swatches);\n                }\n            });\n        }\n\n        if (data.attributes.length === 0) {\n            return;\n        }\n\n        const html = Mustache.render(this.attributesTemplate, data, null, this.templateCustomTags);\n        this.$attributesContainer.append(html);\n\n        let $form;\n\n        if (this.graphQLNode) {\n            // build Form from graphQL\n            $form = $('<form class=\"productSwatches-hiddenForm\"></form>').hide();\n            $form.append(`<input type=\"hidden\" name=\"action\" value=\"add\">`);\n            $form.append(`<input type=\"hidden\" name=\"product_id\" value=\"${this.productId}\">`);\n            $form.append(`<input type=\"hidden\" name=\"qty[]\" value=\"${this.graphQLNode.minPurchaseQuantity || 1}\">`);\n            this.graphQLNode.productOptions.edges.forEach(({ node: optionNode }) => {\n                let defaultValue = '';\n                if (optionNode.values) {\n                    defaultValue = this.autoSelectOptionValues && optionNode.values.edges.length > 0 ? optionNode.values.edges[0].node.entityId : '';\n                    defaultValue = optionNode.values.edges.reduce((_defaultValue, { node: valueNode }) => valueNode.isDefault ? valueNode.entityId : _defaultValue, defaultValue);\n                    if (!defaultValue && attributesData && attributesData.in_stock_attributes) {\n                        defaultValue = optionNode.values.edges.reduce((_defaultValue, { node: valueNode }) => _defaultValue || (attributesData.in_stock_attributes.indexOf(valueNode.entityId) > -1 ? valueNode.entityId : ''), '');\n                    }\n                } else if (optionNode.checkedByDefault) {\n                    defaultValue = 1;\n                }\n                $form.append(`<input type=\"hidden\" name=\"attribute[${optionNode.entityId}]\" value=\"${defaultValue}\">`);\n            });\n        } else {\n            // build Form from AJAX request\n            const $form = $('<div></div>').append(resp).find(this.addToCartFormSelector)\n                .addClass('productSwatches-hiddenForm')\n                .hide();\n\n            // Remove all 'id' to avoid duplicated label.for in quick-view\n            $form.find('[id]').prop('id', null);\n        }\n\n        this.$attributesContainer.append($form);\n\n        this.$attributesContainer.on('click', '[data-attribute-id]', (event) => {\n            event.preventDefault();\n\n            const $a = $(event.currentTarget);\n            const id = $a.data('attributeId');\n            const value = $a.data('attributeValue');\n\n            this.$attributesContainer\n                .find(`[data-attribute-id=${id}]`).removeClass('is-active')\n                .find('input').prop('checked', false);\n            $a.addClass('is-active')\n                .find('input').prop('checked', true);\n\n            $form.find(`[name=\"attribute[${id}]\"]`).val([value]);\n            \n            this.requestAttributesChange($form);\n        });\n\n        if (this.swatchesLimit) {\n            this.$attributesContainer.find('[data-more]').each((i, moreEl) => {\n                const $more = $(moreEl);\n                const $list = $more.closest('[data-swatches]');\n                const $less = $list.find('[data-less]');\n                const $items = $list.find('[data-attribute-id]');\n\n                if ($items.length > this.swatchesLimit) {\n                    const $hiddenItems = $items.filter(j => j >= this.swatchesLimit).hide();\n                    $more.on('click', () => {\n                        $hiddenItems.show();\n                        $more.hide();\n                        $less.show();\n                    });\n                    $less.on('click', () => {\n                        $hiddenItems.hide();\n                        $less.hide();\n                        $more.show();\n                    })\n                } else {\n                    $more.hide();\n                }\n\n                $less.hide();\n            });\n        } else {\n            this.$attributesContainer.find('[data-more], [data-less]').hide();\n        }\n    }\n    \n    requestAttributesChange($form) {\n        if (!window.FormData) {\n            return;\n        }\n\n        const data = this.filterEmptyFilesFromForm(new FormData($form.get(0)));\n\n        $.ajax({\n            url: `/remote/v1/product-attributes/${this.productId}`,\n            method: 'POST',\n            contentType: false,\n            processData: false,\n            data,\n            headers: {\n                'stencil-config': '{}',\n                'stencil-options': '{}',\n                'x-xsrf-token': window.BCData && window.BCData.csrf_token ? window.BCData.csrf_token : '',\n            },\n            xhrFields: {\n                withCredentials: true,\n            },\n            success: (resp) => {\n                const { image, price } = resp.data;\n\n                if (this.imageReplacerFunc) {\n                    const img = image ? image.data.replace('{:size}', this.imageSize) : null;\n                    this.imageReplacerFunc(this.$cardImage, img);\n                } else {\n                    if (image) {\n                        const img = image.data.replace('{:size}', this.imageSize);\n                        if (!this.$cardImage.data('originalSrc')) {\n                            this.$cardImage\n                                .data('originalSrc', this.$cardImage.attr('src'))\n                                .data('originalSrcset', this.$cardImage.attr('srcset'));\n                        }\n                        this.$cardImage\n                            .attr('src', img)\n                            .attr('srcset', '')\n                            .attr('data-srcset', '')\n                            .addClass('productSwatches-image-optionChanged');\n                    } else if (this.$cardImage.data('originalSrc')) {\n                        this.$cardImage\n                            .attr('src', this.$cardImage.data('originalSrc'))\n                            .attr('srcset', this.$cardImage.data('originalSrcset'))\n                            .attr('data-srcset', this.$cardImage.data('originalSrcset'))\n                            .data('originalSrc', null)\n                            .data('originalSrcset', null)\n                            .removeClass('productSwatches-image-optionChanged');\n                    }\n                }\n\n                if (price) {\n                    const viewModel = this.getViewModel(this.$scope);\n                    this.updatePriceView(viewModel, price);\n                }\n            },\n        });\n    }\n\n    /**\n     * https://stackoverflow.com/questions/49672992/ajax-request-fails-when-sending-formdata-including-empty-file-input-in-safari\n     * Safari browser with jquery 3.3.1 has an issue uploading empty file parameters. This function removes any empty files from the form params\n     * @param formData: FormData object\n     * @returns FormData object\n     */\n    filterEmptyFilesFromForm(formData) {\n        try {\n            for (const [key, val] of formData) {\n                if (val instanceof File && !val.name && !val.size) {\n                    formData.delete(key);\n                }\n            }\n        } catch (e) {\n            console.error(e); // eslint-disable-line no-console\n        }\n        return formData;\n    }\n\n    /**\n     * Since $productView can be dynamically inserted using render_with,\n     * We have to retrieve the respective elements\n     *\n     * @param $scope\n     */\n    getViewModel($scope) {\n        return {\n            $priceWithTax: $('[data-product-price-with-tax]', $scope),\n            $priceWithoutTax: $('[data-product-price-without-tax]', $scope),\n            rrpWithTax: {\n                $div: $('.rrp-price--withTax', $scope),\n                $span: $('[data-product-rrp-with-tax]', $scope),\n            },\n            rrpWithoutTax: {\n                $div: $('.rrp-price--withoutTax', $scope),\n                $span: $('[data-product-rrp-price-without-tax]', $scope),\n            },\n            nonSaleWithTax: {\n                $div: $('.non-sale-price--withTax', $scope),\n                $span: $('[data-product-non-sale-price-with-tax]', $scope),\n            },\n            nonSaleWithoutTax: {\n                $div: $('.non-sale-price--withoutTax', $scope),\n                $span: $('[data-product-non-sale-price-without-tax]', $scope),\n            },\n            priceSaved: {\n                $div: $('.price-section--saving', $scope),\n                $span: $('[data-product-price-saved]', $scope),\n            },\n            priceNowLabel: {\n                $span: $('.price-now-label', $scope),\n            },\n            priceLabel: {\n                $span: $('.price-label', $scope),\n            },\n        };\n    }\n\n    /**\n     * Hide the pricing elements that will show up only when the price exists in API\n     * @param viewModel\n     */\n    clearPricingNotFound(viewModel) {\n        viewModel.rrpWithTax.$div.hide();\n        viewModel.rrpWithoutTax.$div.hide();\n        viewModel.nonSaleWithTax.$div.hide();\n        viewModel.nonSaleWithoutTax.$div.hide();\n        viewModel.priceSaved.$div.hide();\n        viewModel.priceNowLabel.$span.hide();\n        viewModel.priceLabel.$span.hide();\n    }\n\n    /**\n     * Update the view of price, messages, SKU and stock options when a product option changes\n     * @param  {Object} data Product attribute data\n     */\n    updatePriceView(viewModel, price) {\n        this.clearPricingNotFound(viewModel);\n\n        if (price.with_tax) {\n            viewModel.priceLabel.$span.show();\n            viewModel.$priceWithTax.html(price.with_tax.formatted);\n        }\n\n        if (price.without_tax) {\n            viewModel.priceLabel.$span.show();\n            viewModel.$priceWithoutTax.html(price.without_tax.formatted);\n        }\n\n        if (price.rrp_with_tax) {\n            viewModel.rrpWithTax.$div.show();\n            viewModel.rrpWithTax.$span.html(price.rrp_with_tax.formatted);\n        }\n\n        if (price.rrp_without_tax) {\n            viewModel.rrpWithoutTax.$div.show();\n            viewModel.rrpWithoutTax.$span.html(price.rrp_without_tax.formatted);\n        }\n\n        if (price.saved) {\n            viewModel.priceSaved.$div.show();\n            viewModel.priceSaved.$span.html(price.saved.formatted);\n        }\n\n        if (price.non_sale_price_with_tax) {\n            viewModel.priceLabel.$span.hide();\n            viewModel.nonSaleWithTax.$div.show();\n            viewModel.priceNowLabel.$span.show();\n            viewModel.nonSaleWithTax.$span.html(price.non_sale_price_with_tax.formatted);\n        }\n\n        if (price.non_sale_price_without_tax) {\n            viewModel.priceLabel.$span.hide();\n            viewModel.nonSaleWithoutTax.$div.show();\n            viewModel.priceNowLabel.$span.show();\n            viewModel.nonSaleWithoutTax.$span.html(price.non_sale_price_without_tax.formatted);\n        }\n    }\n}\n\nexport default Card;"],"sourceRoot":""}